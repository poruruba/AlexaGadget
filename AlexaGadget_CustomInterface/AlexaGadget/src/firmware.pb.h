/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.6 at Tue Jul 14 20:36:52 2020. */

#ifndef PB_FIRMWARE_PB_H_INCLUDED
#define PB_FIRMWARE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _FirmwareComponent {
    uint32_t version;
    char name[16];
    uint32_t size;
    char signature[65];
/* @@protoc_insertion_point(struct:FirmwareComponent) */
} FirmwareComponent;

typedef struct _UpdateComponentSegment {
    char component_name[16];
    uint32_t component_offset;
    uint32_t segment_size;
    char segment_signature[65];
/* @@protoc_insertion_point(struct:UpdateComponentSegment) */
} UpdateComponentSegment;

typedef struct _FirmwareInformation {
    uint32_t version;
    char name[16];
    pb_size_t components_count;
    FirmwareComponent components[1];
    char locale[8];
    char version_name[16];
/* @@protoc_insertion_point(struct:FirmwareInformation) */
} FirmwareInformation;

typedef struct _ApplyFirmware {
    FirmwareInformation firmware_information;
    bool restart_required;
/* @@protoc_insertion_point(struct:ApplyFirmware) */
} ApplyFirmware;

/* Default values for struct fields */

/* Initializer values for message structs */
#define FirmwareComponent_init_default           {0, "", 0, ""}
#define FirmwareInformation_init_default         {0, "", 0, {FirmwareComponent_init_default}, "", ""}
#define UpdateComponentSegment_init_default      {"", 0, 0, ""}
#define ApplyFirmware_init_default               {FirmwareInformation_init_default, 0}
#define FirmwareComponent_init_zero              {0, "", 0, ""}
#define FirmwareInformation_init_zero            {0, "", 0, {FirmwareComponent_init_zero}, "", ""}
#define UpdateComponentSegment_init_zero         {"", 0, 0, ""}
#define ApplyFirmware_init_zero                  {FirmwareInformation_init_zero, 0}

/* Field tags (for use in manual encoding/decoding) */
#define FirmwareComponent_version_tag            1
#define FirmwareComponent_name_tag               2
#define FirmwareComponent_size_tag               3
#define FirmwareComponent_signature_tag          4
#define UpdateComponentSegment_component_name_tag 1
#define UpdateComponentSegment_component_offset_tag 2
#define UpdateComponentSegment_segment_size_tag  3
#define UpdateComponentSegment_segment_signature_tag 4
#define FirmwareInformation_version_tag          1
#define FirmwareInformation_name_tag             2
#define FirmwareInformation_components_tag       3
#define FirmwareInformation_locale_tag           4
#define FirmwareInformation_version_name_tag     5
#define ApplyFirmware_firmware_information_tag   1
#define ApplyFirmware_restart_required_tag       2

/* Struct field encoding specification for nanopb */
extern const pb_field_t FirmwareComponent_fields[5];
extern const pb_field_t FirmwareInformation_fields[6];
extern const pb_field_t UpdateComponentSegment_fields[5];
extern const pb_field_t ApplyFirmware_fields[3];

/* Maximum encoded size of messages (where known) */
#define FirmwareComponent_size                   97
#define FirmwareInformation_size                 152
#define UpdateComponentSegment_size              97
#define ApplyFirmware_size                       157

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define FIRMWARE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
