/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.6 at Tue Jul 14 20:36:51 2020. */

#ifndef PB_ACCESSORIES_PB_H_INCLUDED
#define PB_ACCESSORIES_PB_H_INCLUDED
#include <pb.h>

#include "common.pb.h"

#include "device.pb.h"

#include "firmware.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Command {
    Command_NONE = 0,
    Command_GET_DEVICE_INFORMATION = 20,
    Command_GET_DEVICE_FEATURES = 28,
    Command_UPDATE_COMPONENT_SEGMENT = 94,
    Command_APPLY_FIRMWARE = 95
} Command;
#define _Command_MIN Command_NONE
#define _Command_MAX Command_APPLY_FIRMWARE
#define _Command_ARRAYSIZE ((Command)(Command_APPLY_FIRMWARE+1))

/* Struct definitions */
typedef struct _Response {
    ErrorCode error_code;
    pb_size_t which_payload;
    union {
        FirmwareComponent firmware_component;
        DeviceInformation device_information;
        DeviceFeatures device_features;
    } payload;
/* @@protoc_insertion_point(struct:Response) */
} Response;

typedef struct _ControlEnvelope {
    Command command;
    pb_size_t which_payload;
    union {
        Response response;
        GetDeviceInformation get_device_information;
        GetDeviceFeatures get_device_features;
        UpdateComponentSegment update_component_segment;
        ApplyFirmware apply_firmware;
    } payload;
/* @@protoc_insertion_point(struct:ControlEnvelope) */
} ControlEnvelope;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Response_init_default                    {_ErrorCode_MIN, 0, {FirmwareComponent_init_default}}
#define ControlEnvelope_init_default             {_Command_MIN, 0, {Response_init_default}}
#define Response_init_zero                       {_ErrorCode_MIN, 0, {FirmwareComponent_init_zero}}
#define ControlEnvelope_init_zero                {_Command_MIN, 0, {Response_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define Response_firmware_component_tag          2
#define Response_device_information_tag          3
#define Response_device_features_tag             28
#define Response_error_code_tag                  1
#define ControlEnvelope_response_tag             9
#define ControlEnvelope_get_device_information_tag 20
#define ControlEnvelope_get_device_features_tag  28
#define ControlEnvelope_update_component_segment_tag 94
#define ControlEnvelope_apply_firmware_tag       95
#define ControlEnvelope_command_tag              1

/* Struct field encoding specification for nanopb */
extern const pb_field_t Response_fields[5];
extern const pb_field_t ControlEnvelope_fields[7];

/* Maximum encoded size of messages (where known) */
#define Response_size                            101
#define ControlEnvelope_size                     163

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define ACCESSORIES_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
